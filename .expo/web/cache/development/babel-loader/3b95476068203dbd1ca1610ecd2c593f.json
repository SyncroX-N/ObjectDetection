{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"C:\\\\Users\\\\hkdj\\\\Desktop\\\\Done\\\\screens\\\\CameraRender\\\\CameraRender.js\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextDisplay from \"./TextDisplay\";\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\nimport { Camera } from 'expo-camera';\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport { cameraWithTensors } from '@tensorflow/tfjs-react-native';\nconsole.disableYellowBox = true;\nvar windowHeight = Dimensions.get('window').height;\nvar windowWidth = Dimensions.get('window').width;\nimport { makeObservable, observable, action, computed } from \"mobx\";\n\nvar WordPrediction = function () {\n  function WordPrediction() {\n    _classCallCheck(this, WordPrediction);\n\n    this.word = \"\";\n    this.showPrediction = false;\n    makeObservable(this, {\n      word: observable,\n      toggle: action,\n      getWord: computed,\n      getShowPrediction: computed,\n      prediction: action,\n      showPrediction: observable\n    });\n  }\n\n  _createClass(WordPrediction, [{\n    key: \"toggle\",\n    value: function toggle(word) {\n      this.word = word;\n    }\n  }, {\n    key: \"prediction\",\n    value: function prediction(val) {\n      this.showPrediction = val;\n    }\n  }, {\n    key: \"getWord\",\n    get: function get() {\n      return this.word;\n    }\n  }, {\n    key: \"getShowPrediction\",\n    get: function get() {\n      return this.showPrediction;\n    }\n  }]);\n\n  return WordPrediction;\n}();\n\nexport default function CameraRender() {\n  var store = new WordPrediction();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      word = _useState2[0],\n      setWord = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      predictionFound = _useState4[0],\n      setPredictionFound = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasPermission = _useState6[0],\n      setHasPermission = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      mobilenetModel = _useState8[0],\n      setMobilenetModel = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      frameworkReady = _useState10[0],\n      setFrameworkReady = _useState10[1];\n\n  var TensorCamera = cameraWithTensors(Camera);\n  var requestAnimationFrameId = 0;\n  var textureDims = Platform.OS === \"ios\" ? {\n    width: 1080,\n    height: 1920\n  } : {\n    width: 1600,\n    height: 1200\n  };\n  var tensorDims = {\n    width: 152,\n    height: 200\n  };\n  useEffect(function () {\n    if (!frameworkReady) {\n      (function _callee() {\n        var _await$Camera$request, status;\n\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n              case 2:\n                _await$Camera$request = _context.sent;\n                status = _await$Camera$request.status;\n                console.log(\"permissions status: \" + status);\n                setHasPermission(status === 'granted');\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(tf.ready());\n\n              case 8:\n                _context.t0 = setMobilenetModel;\n                _context.next = 11;\n                return _regeneratorRuntime.awrap(loadMobileNetModel());\n\n              case 11:\n                _context.t1 = _context.sent;\n                (0, _context.t0)(_context.t1);\n                setFrameworkReady(true);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [frameworkReady]);\n  useEffect(function () {\n    return function () {\n      cancelAnimationFrame(requestAnimationFrameId);\n    };\n  }, [requestAnimationFrameId]);\n\n  var loadMobileNetModel = function loadMobileNetModel() {\n    var model;\n    return _regeneratorRuntime.async(function loadMobileNetModel$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(mobilenet.load());\n\n          case 2:\n            model = _context2.sent;\n            return _context2.abrupt(\"return\", model);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getPrediction = function getPrediction(tensor) {\n    var prediction;\n    return _regeneratorRuntime.async(function getPrediction$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(!tensor && tensor != null && !store.getShowPrediction)) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(mobilenetModel.classify(tensor, 1));\n\n          case 4:\n            prediction = _context3.sent;\n\n            if (!(!prediction || prediction.length === 0)) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 7:\n            if (prediction[0].probability > 0.6) {\n              store.toggle(prediction[0].className);\n            }\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleCameraStream = function handleCameraStream(imageAsTensors) {\n    var loop = function loop() {\n      var nextImageTensor;\n      return _regeneratorRuntime.async(function loop$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(imageAsTensors.next().value);\n\n            case 2:\n              nextImageTensor = _context4.sent;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(getPrediction(nextImageTensor));\n\n            case 5:\n              requestAnimationFrameId = requestAnimationFrame(loop);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (!predictionFound) loop();\n  };\n\n  var renderCameraView = function renderCameraView() {\n    return React.createElement(React.Fragment, null, React.createElement(View, {\n      style: styles.cameraView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 14\n      }\n    }, React.createElement(TensorCamera, {\n      style: styles.camera,\n      type: Camera.Constants.Type.back,\n      zoom: 0,\n      cameraTextureHeight: textureDims.height,\n      cameraTextureWidth: textureDims.width,\n      resizeHeight: tensorDims.height,\n      resizeWidth: tensorDims.width,\n      resizeDepth: 3,\n      onReady: handleCameraStream,\n      autorender: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    })), React.createElement(View, {\n      style: styles.bottomContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }\n    }, React.createElement(TextDisplay, {\n      store: store,\n      styles: styles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 56\n      }\n    })));\n  };\n\n  return frameworkReady ? renderCameraView() : React.createElement(SafeAreaView, {\n    styles: styles.loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 44\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 82\n    }\n  }, \"Loading Model\"));\n}\nvar styles = StyleSheet.create({\n  predictionContainer: {\n    backgroundColor: 'rgba(52, 52, 52, 0.5)',\n    width: '100%'\n  },\n  bottomContainer: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%'\n  },\n  title: {\n    margin: 10,\n    fontSize: 45,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: '#ffffff'\n  },\n  loading: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  cameraView: {\n    display: 'flex',\n    flex: 1,\n    width: '100%',\n    height: '100%'\n  },\n  camera: {\n    height: windowHeight,\n    width: windowWidth,\n    zIndex: 1,\n    borderWidth: 0,\n    borderRadius: 0\n  }\n});","map":{"version":3,"sources":["C:/Users/hkdj/Desktop/Done/screens/CameraRender/CameraRender.js"],"names":["React","useState","useEffect","TextDisplay","Constants","Permissions","Camera","tf","mobilenet","cameraWithTensors","console","disableYellowBox","windowHeight","Dimensions","get","height","windowWidth","width","makeObservable","observable","action","computed","WordPrediction","word","showPrediction","toggle","getWord","getShowPrediction","prediction","val","CameraRender","store","setWord","predictionFound","setPredictionFound","hasPermission","setHasPermission","mobilenetModel","setMobilenetModel","frameworkReady","setFrameworkReady","TensorCamera","requestAnimationFrameId","textureDims","Platform","OS","tensorDims","requestPermissionsAsync","status","log","ready","loadMobileNetModel","cancelAnimationFrame","load","model","getPrediction","tensor","classify","length","probability","className","handleCameraStream","imageAsTensors","loop","next","value","nextImageTensor","requestAnimationFrame","renderCameraView","styles","cameraView","camera","Type","back","bottomContainer","loading","StyleSheet","create","predictionContainer","backgroundColor","position","bottom","title","margin","fontSize","fontWeight","textAlign","color","top","left","right","justifyContent","alignItems","display","flex","zIndex","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n//react native\r\nimport {  Text, View,  StyleSheet,  Platform, Dimensions, SafeAreaView } from 'react-native';\r\n\r\nimport TextDisplay from './TextDisplay';\r\n//Expo\r\nimport Constants from 'expo-constants';\r\nimport * as Permissions from 'expo-permissions';\r\nimport { Camera } from 'expo-camera';\r\n\r\n//Tensorflow\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\nimport {cameraWithTensors} from '@tensorflow/tfjs-react-native';\r\n\r\n//disable yellow warnings on EXPO client!\r\nconsole.disableYellowBox = true;\r\n\r\nconst windowHeight = Dimensions.get('window').height;\r\nconst windowWidth = Dimensions.get('window').width;\r\n\r\nimport { makeObservable, observable, action, computed } from \"mobx\"\r\n\r\nclass WordPrediction {\r\n    word = \"\"\r\n    showPrediction = false\r\n    constructor() {\r\n        makeObservable(this, {\r\n            word: observable,\r\n            toggle: action,\r\n            getWord: computed,\r\n            getShowPrediction: computed,\r\n            prediction: action,\r\n            showPrediction:observable,\r\n\r\n        })\r\n    }\r\n    get getWord () {\r\n      // console.log(this.word)\r\n      return this.word\r\n    }\r\n    \r\n    get getShowPrediction () {\r\n      return this.showPrediction;\r\n    }\r\n\r\n    toggle(word) {\r\n        this.word = word\r\n        // console.log(word)\r\n    }\r\n\r\n    prediction(val) {\r\n      this.showPrediction = val;\r\n    }\r\n}\r\n\r\n\r\nexport default function CameraRender() {\r\n\r\n  //------------------------------------------------\r\n  //state variables for image/translation processing\r\n  //------------------------------------------------\r\n  const store = new WordPrediction();\r\n  const [word, setWord] = useState('');\r\n  const [predictionFound, setPredictionFound] = useState(false);\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n\r\n  //Tensorflow and Permissions\r\n  const [mobilenetModel, setMobilenetModel] = useState(null);\r\n  const [frameworkReady, setFrameworkReady] = useState(false);\r\n\r\n \r\n\r\n  //TF Camera Decorator\r\n  const TensorCamera = cameraWithTensors(Camera);\r\n\r\n  //RAF ID\r\n  let requestAnimationFrameId = 0;\r\n\r\n  //performance hacks (Platform dependent)\r\n  const textureDims = Platform.OS === \"ios\"? { width: 1080, height: 1920 } : { width: 1600, height: 1200 };\r\n  const tensorDims = { width: 152, height: 200 }; \r\n\r\n  //-----------------------------\r\n  // Run effect once\r\n  // 1. Check camera permissions\r\n  // 2. Initialize TensorFlow\r\n  // 3. Load Mobilenet Model\r\n  //-----------------------------\r\n  useEffect(() => {\r\n    if(!frameworkReady) {\r\n      (async () => {\r\n\r\n        //check permissions\r\n        const { status } = await Camera.requestPermissionsAsync();\r\n        console.log(`permissions status: ${status}`);\r\n        setHasPermission(status === 'granted');\r\n\r\n        //we must always wait for the Tensorflow API to be ready before any TF operation...\r\n        await tf.ready();\r\n\r\n        //load the mobilenet model and save it in state\r\n        setMobilenetModel(await loadMobileNetModel());\r\n\r\n        setFrameworkReady(true);\r\n      })();\r\n    }\r\n  }, [frameworkReady]);\r\n  \r\n\r\n  //--------------------------\r\n  // Run onUnmount routine\r\n  // for cancelling animation \r\n  // if running to avoid leaks\r\n  //--------------------------\r\n  useEffect(() => {\r\n    return () => {\r\n      cancelAnimationFrame(requestAnimationFrameId);\r\n    };\r\n  }, [requestAnimationFrameId]);\r\n\r\n\r\n\r\n  //-----------------------------------------------------------------\r\n  // Loads the mobilenet Tensorflow model: \r\n  // https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\r\n  // Parameters:\r\n  // \r\n  // NOTE: Here, I suggest you play with the version and alpha params\r\n  // as they control performance and accuracy for your app. For instance,\r\n  // a lower alpha increases performance but decreases accuracy. More\r\n  // information on this topic can be found in the link above.  In this\r\n  // tutorial, I am going with the defaults: v1 and alpha 1.0\r\n  //-----------------------------------------------------------------\r\n  const loadMobileNetModel = async () => {\r\n    const model = await mobilenet.load();\r\n    return model;\r\n  }\r\n\r\n\r\n  //----------------------------------------------------------------------------------------\r\n  // MobileNet tensorflow model classify operation returns an array of prediction objects \r\n  // with this structure: prediction = [ {\"className\": \"object name\", \"probability\": 0-1 } ]\r\n  // where:\r\n  // className = The class of the object being identified. Currently, this model identifies 1000 different classes.\r\n  // probability = Number between 0 and 1 that represents the prediction's probability \r\n  // Example (with a topk parameter set to 3 => default):\r\n  // [\r\n  //   {\"className\":\"joystick\",\"probability\":0.8070220947265625},\r\n  //   {\"className\":\"screen, CRT screen\",\"probability\":0.06108357384800911},\r\n  //   {\"className\":\"monitor\",\"probability\":0.04016926884651184}\r\n  // ]\r\n  // In this case, we use topk set to 1 as we are interested in the higest result for\r\n  // both performance and simplicity. This means the array will return 1 prediction only!\r\n  //----------------------------------------------------------------------------------------\r\n  const getPrediction = async(tensor) => {\r\n    if (!tensor && tensor != null && !store.getShowPrediction) return;\r\n   \r\n    //topk set to 1\r\n    const prediction = await mobilenetModel.classify(tensor, 1);\r\n    // console.log(`prediction: ${JSON.stringify(prediction)}`);\r\n\r\n    if(!prediction || prediction.length === 0) { return; }\r\n    \r\n    //only attempt translation when confidence is higher than 20%\r\n    if(prediction[0].probability > 0.6) {\r\n\r\n      //stop looping!\r\n      // cancelAnimationFrame(requestAnimationFrameId);\r\n      // setPredictionFound(true);\r\n      // setWord(prediction[0].className);\r\n      store.toggle(prediction[0].className);\r\n      // console.log(store.word)\r\n      //get translation!\r\n      // await getTranslation(prediction[0].className);\r\n    }\r\n  }\r\n\r\n  //------------------------------------------------------------------------------\r\n  // Helper function to handle the camera tensor streams. Here, to keep up reading\r\n  // input streams, we use requestAnimationFrame JS method to keep looping for \r\n  // getting better predictions (until we get one with enough confidence level).\r\n  // More info on RAF:\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\r\n  //------------------------------------------------------------------------------\r\n  const handleCameraStream = (imageAsTensors) => {\r\n    const loop = async () => {\r\n      \r\n      // if ( Platform.OS !== \"ios\" && Math.random()*50 % 50 == 1) run = false;\r\n      // else if( Math.random()*7 % 7 == 0 ) { run = false; }\r\n        const nextImageTensor = await imageAsTensors.next().value;\r\n        await getPrediction(nextImageTensor);\r\n        requestAnimationFrameId = requestAnimationFrame(loop);\r\n      }\r\n    if(!predictionFound) loop();\r\n  }\r\n \r\n\r\n  //--------------------------------------------------------------------------------\r\n  // Helper function to show the Camera View. \r\n  //\r\n  // NOTE: Please note we are using TensorCamera component which is constructed \r\n  // on line: 37 of this function component. This is just a decorated expo.Camera \r\n  // component with extra functionality to stream Tensors, define texture dimensions\r\n  // and other goods. For further research:\r\n  // https://js.tensorflow.org/api_react_native/0.2.1/#cameraWithTensors\r\n  //--------------------------------------------------------------------------------\r\n  const renderCameraView = () => {\r\n    return <><View style={styles.cameraView}>\r\n                <TensorCamera\r\n                  style={styles.camera}\r\n                  type={Camera.Constants.Type.back}\r\n                  zoom={0}\r\n                  cameraTextureHeight={textureDims.height}\r\n                  cameraTextureWidth={textureDims.width}\r\n                  resizeHeight={tensorDims.height}\r\n                  resizeWidth={tensorDims.width}\r\n                  resizeDepth={3}\r\n                  onReady={ handleCameraStream}\r\n                  autorender={true}\r\n                />\r\n            </View>\r\n                  <View style={styles.bottomContainer}><TextDisplay store={store} styles={styles}/></View>\r\n                  </>\r\n\r\n            ;\r\n  }\r\n  return (\r\n     frameworkReady ? renderCameraView() : <SafeAreaView styles={styles.loading}><Text>Loading Model</Text></SafeAreaView>  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n  predictionContainer: {\r\n    backgroundColor: 'rgba(52, 52, 52, 0.5)',\r\n    width: '100%',\r\n  },\r\n  bottomContainer: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    width: '100%',\r\n  },\r\n  title: {\r\n    margin: 10,\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    color: '#ffffff',\r\n  },\r\n  loading: {\r\n    position: 'absolute', \r\n    top: 0, \r\n    left: 0, \r\n    right: 0, \r\n    bottom: 0, \r\n    justifyContent: 'center', \r\n    alignItems: 'center'\r\n  },\r\n  cameraView: {\r\n    display: 'flex',\r\n    flex:1,\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  camera : {\r\n    height: windowHeight,\r\n    width: windowWidth,\r\n    zIndex: 1,\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n  },\r\n});\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}