{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hkdj\\\\Desktop\\\\Done\\\\screens\\\\CameraRender\\\\TextDisplay.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as Speech from 'expo-speech';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nexport default function TextDisplay(props) {\n  var store = props.store,\n      styles = props.styles;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      word = _useState2[0],\n      setWord = _useState2[1];\n\n  setInterval(function () {\n    store.prediction(true);\n    setWord(store.getWord);\n    setTimeout(function () {\n      store.prediction(false);\n    }, 400);\n  }, 1000);\n  var prevWordRef = useRef();\n  useEffect(function () {\n    prevWordRef.current = word;\n  });\n  var prevWord = prevWordRef.current;\n\n  var onSpeak = function onSpeak() {\n    if (word !== prevWord) {\n      Speech.speak(word, {\n        language: 'en',\n        pitch: 1,\n        rate: 1\n      });\n    }\n  };\n\n  console.log(word);\n  return React.createElement(View, {\n    style: styles.predictionContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, onSpeak(), word));\n}","map":{"version":3,"sources":["C:/Users/hkdj/Desktop/Done/screens/CameraRender/TextDisplay.js"],"names":["React","useState","useEffect","useRef","Speech","TextDisplay","props","store","styles","word","setWord","setInterval","prediction","getWord","setTimeout","prevWordRef","current","prevWord","onSpeak","speak","language","pitch","rate","console","log","predictionContainer","title"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;;;AAQA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,MACjCC,KADiC,GACfD,KADe,CACjCC,KADiC;AAAA,MAC1BC,MAD0B,GACfF,KADe,CAC1BE,MAD0B;;AAAA,kBAEjBP,QAAQ,CAAC,EAAD,CAFS;AAAA;AAAA,MAElCQ,IAFkC;AAAA,MAE5BC,OAF4B;;AAGzCC,EAAAA,WAAW,CAAC,YAAM;AAChBJ,IAAAA,KAAK,CAACK,UAAN,CAAiB,IAAjB;AACAF,IAAAA,OAAO,CAACH,KAAK,CAACM,OAAP,CAAP;AACAC,IAAAA,UAAU,CAAC,YAAM;AACfP,MAAAA,KAAK,CAACK,UAAN,CAAiB,KAAjB;AACD,KAFS,EAEP,GAFO,CAAV;AAGD,GANU,EAMR,IANQ,CAAX;AAQA,MAAMG,WAAW,GAAGZ,MAAM,EAA1B;AACAD,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,WAAW,CAACC,OAAZ,GAAsBP,IAAtB;AACD,GAFQ,CAAT;AAGA,MAAMQ,QAAQ,GAAGF,WAAW,CAACC,OAA7B;;AAEF,MAAME,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QAAGT,IAAI,KAAKQ,QAAZ,EAAsB;AACtBb,MAAAA,MAAM,CAACe,KAAP,CAAaV,IAAb,EAAmB;AAACW,QAAAA,QAAQ,EAAE,IAAX;AAAiBC,QAAAA,KAAK,EAAE,CAAxB;AAA2BC,QAAAA,IAAI,EAAE;AAAjC,OAAnB;AAAwD;AACzD,GAHD;;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACE,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACiB,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjB,MAAM,CAACkB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BR,OAAO,EAAnC,EAAuCT,IAAvC,CADF,CADF;AAKD","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport * as Speech from 'expo-speech';\n\n//react native\nimport {\n  Text,\n  View,\n \n} from \"react-native\";\nexport default function TextDisplay(props) {\n  const { store, styles } = props;\n  const [word, setWord] = useState(\"\");\n  setInterval(() => {\n    store.prediction(true);\n    setWord(store.getWord);\n    setTimeout(() => {\n      store.prediction(false);\n    }, 400);\n  }, 1000);\n\n  const prevWordRef = useRef();\n  useEffect(() => {\n    prevWordRef.current = word;\n  });\n  const prevWord = prevWordRef.current;\n\nconst onSpeak = () => {\n  if(word !== prevWord ){\n  Speech.speak(word, {language: 'en', pitch: 1, rate: 1})}\n}\nconsole.log(word)\n  return (\n    <View style={styles.predictionContainer}>\n      <Text style={styles.title}>{onSpeak()}{word}</Text>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}